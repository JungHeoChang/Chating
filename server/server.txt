void TCP()
클라이언트의 접속을 확인하고 자식 서버를 생성한다. 더불어 공유메모리 사용을 준비한다.

void Send_Msg(int, char *, char*, char *)
메세지 상태에 따른 분류 작업을 한 뒤 메세지를 클라이언트에게 전송한다.

int Recv_Msg(int)
클라이언트에게서 온 메세지를 분류한다.

void Mysql_server()
메세지 저장을 위한 데이터베이스에 접속한다.

void User_Mysql_server()
유저 이름을 저장하기 위한 데이터베이스에 접속한다.

void Send_Sql(char*, char*, char*)
클라이언트에게 받은 메세지와 시간, 상태, 아이디를 데이터베이스에 저장한다.

void Recv_Sql(int)
데이터베이스에 저장한 메세지를 가져온다.

void Thread(int)
메세지 보내기와 받기를 쓰레드를 이용하여 언제든지 작동하게 하며 데이터베이스 원할한 접근을 위해 상호배제를 적용한다.

void * Send_Function(void *)
메세지를 데이터베이스에서 언제든지 받기위해 함수를 쓰레드로 작동시킨다.

void * Recv_Function(void *)
메세지를 클라이언트에게 언제든지 받기위해 함수를 쓰레드로 작동시킨다.

char * read_count(const char *)
클라이언트에게서 온 메세지를 처리한다.
예) 005Hello
*Hello 뒤는 전부 공백(스페이스바)로 채워져있다.
함수 첫 부분에서 005를 읽은 뒤 숫자로 바꾼 값으로 메세지 길이를 알아낸 뒤 그 길이만큼 읽고 영어와 한글을 분류하여 배열의 길이를 다르게 한다.
이유는  utf-8(유니코드)에서는 영어는 1바이트 한글은 3바이트로 표현하기 때문이다. 문자의 길이를 제외한 나머지는 버린다.

char * send_count(const char *, int)
메세지의 길이를 알기위해 한글은 3바이트 영어는 1바이트씩 읽어 메세지 처음부분에 세자리로 표시한다. 
그 외에 남는 부분은 " " 공백으로 채운다.

int CharToInt(char)
문자를 숫자로 바꾸어 준다.

void Current_user_add(int, chra *)
새로운 클라이언트 접속시 데이터베이스에 아이디를 추가한다. 
그 다음에 데이터베이스에 있는 총인원수와 아이디들을 다른 클라이언트에게 보낸다.

void Current_user_remove(int, char *)
클라이언트가 종료 시에 데이터베이스에 있는 아이디를 삭제한다.
그 다음에 데이터베이스에 있는 총인원수와 아이디들을 다른 클라이언트에게 보낸다.

void Current_user(int, char *)
현재 클라이언트의 아이디와 인원수를 클라이언트에게 보낸다.

char * Current_user_count(int, int)
int형의 유저수를 char형으로 바꾼다.

void Check_Update(int)
update.txt 파일을 읽어 현재 서버의 업데이트 버전을 클라이언트에게 전송한다.

void Before_Message(int)
이전 메세지 100개를 데이터베이스에서 가져온다.

void Send_Before_Msg(int, char *, char *, char *, char *)
이전 메세지를 클라이언트에게 보낸다.

void Error_Handling(const char *)
에러 메세지 출력

void z_handler(int)
자식 서버 종료시 좀비 프로세스가 되지 않도록 처리
